具体要求：
小车AGV调度
一、场景描述：
1.地图大小是10×10（即：每行有10个点，小车可以在这10个点移动；每列有10个点，小车也可以在这10个点移动），点与点之间通过黑色线段连接。也即，地图是由一个9×9的矩形整合而成
2.小车分布在点上，可以沿着黑色线段移动，速度是每一个单位时间移动一个单位距离，即不同的小车匀速且速度相同
3.在地图上存在障碍物，障碍物由两个矩形组成，小车在前进的时候不能穿过障碍物。
其中一个障碍物由A点[2,2]、B点[2,4]、C点[6,2]、D点[6,4]围成，另一个障碍物由a点[4,6]、b点[4,8]、c点[8,6]、d点[8,8]组成。小车位置、任务点和轨迹可以在这些点上，但不能在四个点围成的点内。
二、任务描述
1.基本要求：给定15辆车、20个货物搬运调度任务，规划路线
2.小车位置：初始生成15辆小车的位置
3.调度任务：随机生成20个货物搬运任务的起始点和终点（pi,pj），其中pi是货物的起始坐标，pj是货物的终点坐标
4.针对每次任务，需要决策由哪辆小车去执行货物搬运任务最优，并由该辆小车进行搬运任务，即：从该小车的位置点出发，途径某一任务的起始点pi，到达终点pj；另外，小车不能穿过障碍物，这是前提
5.针对每次任务，给定最优的移动路线
三、其他要求
1.能否使用A*算法，实现这个AGC小车调度任务？
2.请提供python实现代码和前端代码，运行后可以在浏览器界面上进行呈现
3.前端要求：
①初始呈现地图和随机生成的15个小车的位置
②开始第一次任务，点击触发后，显示第一次任务的货物搬运任务的起始点和终点（pi,pj），并开始选择执行任务最优的小车，开始执行；执行完后，呈现轨迹和移动路线经过的坐标；
③点击触发后，开始下一任务，如此循环，直到完成20次任务。


1. 项目结构
agv-scheduling/
├── backend/
│   ├── __init__.py
│   ├── main.py              # FastAPI 后端主程序
│   ├── models/
│   │   ├── __init__.py
│   │   ├── agv.py          # AGV小车类
│   │   ├── task.py         # 任务类
│   │   └── map.py          # 地图类
│   ├── algorithms/
│   │   ├── __init__.py
│   │   ├── astar.py        # A*寻路算法
│   │   └── scheduler.py     # 调度算法
│   └── utils/
│       ├── __init__.py
│       └── helpers.py       # 辅助函数
├── frontend/
│   ├── index.html          # 主页面
│   ├── css/
│   │   └── style.css       # 样式文件
│   └── js/
│       ├── main.js         # 主逻辑
│       ├── map.js          # 地图渲染
│       └── websocket.js    # WebSocket通信
└── requirements.txt        # Python依赖
2. 核心功能模块
2.1 后端模块
地图系统 (map.py)
10x10网格地图的实现
障碍物的定义和检测
路径可行性验证
AGV模型 (agv.py)
AGV位置信息
移动控制
状态管理（空闲/任务中）
任务系统 (task.py)
任务生成器
任务队列管理
任务状态跟踪
寻路算法 (astar.py)
A算法实现
路径优化
避障处理
调度系统 (scheduler.py)
AGV分配策略
任务优先级处理
路径规划整合
2.2 前端模块
地图显示
网格绘制
障碍物显示
AGV位置实时更新
交互控制
任务触发按钮
状态显示
进度追踪
动画效果
AGV移动动画
路径显示
任务完成效果
3. 通信协议
WebSocket消息类型
初始化消息（地图、AGV初始位置）
任务消息（新任务的起点终点）
状态更新（AGV位置、任务进度）
完成消息（任务完成信息）
4. 实现步骤
后端基础架构搭建
A算法实现
AGV调度系统实现
前端界面开发
WebSocket通信实现
动画效果实现
测试和优化
5. 技术栈
后端
Python 3.8+
FastAPI
NumPy (数值计算)
WebSocket
前端
HTML5
CSS3
JavaScript
Canvas (地图渲染)
WebSocket

让我帮你整理一个完整的启动步骤：
1.首先创建项目目录结构：
mkdir agv-scheduling
cd agv-scheduling
# 创建后端目录
mkdir -p backend/models backend/algorithms backend/utils
touch backend/__init__.py
touch backend/models/__init__.py
touch backend/algorithms/__init__.py
touch backend/utils/__init__.py
# 创建前端目录
mkdir -p frontend/css frontend/js


创建并安装依赖文件：
# 在项目根目录创建 requirements.txt
echo "fastapi==0.68.0
uvicorn==0.15.0
numpy==1.21.2
websockets==10.0" > requirements.txt
# 安装依赖
pip install -r requirements.txt

3. 复制所有源代码文件到对应目录：
# 后端文件
cp backend/main.py backend/
cp backend/models/map.py backend/models/
cp backend/models/agv.py backend/models/
cp backend/models/task.py backend/models/
cp backend/algorithms/astar.py backend/algorithms/
cp backend/algorithms/scheduler.py backend/algorithms/
# 前端文件
cp frontend/index.html frontend/
cp frontend/css/style.css frontend/css/
cp frontend/js/map.js frontend/js/
cp frontend/js/main.js frontend/js/
cp frontend/js/websocket.js frontend/js/


启动服务：
# 终端1：启动后端服务
cd agv-scheduling
python backend/main.py
# 终端2：启动前端服务
cd agv-scheduling/frontend
python -m http.server 8080


访问系统：
打开浏览器访问 http://localhost:8080
你应该能看到：
9×9的黑色网格地图
两个灰色矩形障碍物
15辆随机分布的绿色AGV小车
右侧的控制面板
6. 使用系统：
点击"开始任务"按钮开始第一个任务
观察：
蓝色取货点
红色送货点
绿色AGV移动路径
任务进度更新